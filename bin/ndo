#!/usr/bin/env ruby

require 'thread'

$:.unshift File.dirname(__FILE__) + "/../lib"
require 'ssh_run'

class Worker
  def initialize(command, reporter, queue)
    @command = command
    @queue = queue
    @reporter = reporter
  end
  
  def start
    @thread = Thread.start do
      loop do
        host = @queue.pop
        break if host == :shutdown

        act host
      end
    end
    self
  end
  
  def act(host)
    begin
      timeout(10) do
        out, err = host.run(@command)
        @reporter.report_sucess(host, out)
      end
    rescue => ex
      @reporter.report_failure(host, ex)
    end
  end
  
  def join
    @thread.join
  end
end

class HostReporter
  def initialize
    @report_mutex = Mutex.new
  end
  
  def report_sucess(host, output)
    @report_mutex.synchronize do
      print "%20s: " % host.name
    
      clean_out = output.chomp
      puts if clean_out.index("\n")
      puts clean_out
      puts if clean_out.index("\n")
    end
  end
  
  def report_failure(host, exception)
    @report_mutex.synchronize do
      print "%20s: " % host.name
    
      puts "FAILURE: #{exception}"
    end
  end
end

if ARGV.empty?
  puts "Usage: ndo HOSTS COMMAND"
  puts " Executes COMMAND on all HOSTS in parallel."
  exit 1
end

reporter = HostReporter.new
queue = Queue.new
File.readlines(ARGV.shift).each { |line|
  queue.push Host.new(line.chomp)
}

workers = []
command = ARGV.join(' ')
20.times do
  queue.push :shutdown
  workers << Worker.new(command, reporter, queue).start
end

workers.each do |worker|
  worker.join
end
